apiVersion: v1
kind: Namespace
metadata:
  name: blocky
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blocky-deployment
  labels:
    app: blocky
spec:
  replicas: 5  # Number of desired pods
  selector:
    matchLabels:
      app: blocky
  template:
    metadata:
      labels:
        app: blocky
    spec:
      # Configure a topology spread constraint
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: blocky
      containers:
        - name: blocky
          image: alexkennedy840/blocky:latest
          ports:
            - containerPort: 8080
          env:
            - name: INFURA_API_KEY
              valueFrom:
                secretKeyRef:
                  name: infura-api-key
                  key: api_key
            - name: REDIS_URL
              value: "redis://redis-service:6379"
          livenessProbe:
            httpGet:
              path: /api/health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 1
          readinessProbe:
            httpGet:
              path: /api/health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: blocky-service
  labels:
    app: blocky
spec:
  selector:
    app: blocky
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: LoadBalancer
# TODO: could enable SSL
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7.0.0-alpine # Use the latest stable version or the version you need
          ports:
            - containerPort: 6379
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  labels:
    app: redis
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    app: redis

